# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0
  aws-s3: circleci/aws-s3@4.0

jobs:
  local-build-test:
    docker:
      - image: cimg/rust:1.75.0
    steps:
      - checkout
      - run:
          name: Set up Rust environment
          command: |
            rustup component add rustfmt clippy
      - run:
          name: Build Babylon contracts
          command: |
            cargo build
      - run:
          name: Test generating schema
          command: |
            (cd ./contracts/babylon && cargo run --bin schema)
            (cd ./contracts/btc-staking && cargo run --bin btcstaking-schema)
      - run:
          name: Check formats and run unit tests
          command: |
            cargo test --lib

  wasm-build-check-integration:
    docker:
      - image: cimg/rust:1.75.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build optimised Wasm binaries
          command: |
            ./scripts/build-optimizer-ci.sh
      - run:
          name: Install cosmwasm-check
          # Uses --debug for compilation speed
          command: cargo install --locked --debug --version ^1.5 cosmwasm-check
      - run:
          name: Check the Wasm binaries' validity
          command: |
            cosmwasm-check /home/circleci/project/artifacts/*.wasm
      - run:
          name: Integration tests based on CosmWasm
          command: |
            cargo test --test integration
      - persist_to_workspace:
          root: /home/circleci/project/artifacts
          paths:
            - babylon_contract.wasm
            - btc_staking.wasm

  benchmarking:
    docker:
      - image: cimg/rust:1.75.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build optimised Wasm binaries
          command: |
            ./scripts/build-optimizer-ci.sh
      - run:
          name: Version information (default; stable)
          command: rustc --version && cargo --version
      - run:
          name: Run babylon contract benchmarks
          working_directory: ~/project/contracts/babylon
          command: cargo bench --package babylon-contract -- --color never --save-baseline btc_light_client

  push-to-s3:
    machine:
      image: ubuntu-2204:2022.10.1
      resource_class: large
    steps:
      - attach_workspace:
          at: /tmp
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: "$AWS_REGION"
      - aws-s3/copy:
          from: /tmp/babylon_contract.wasm
          to: $S3_BUCKET_PREFIX/$CIRCLE_PROJECT_REPONAME-$CIRCLE_SHA1.wasm

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_contracts:
    docker:
      - image: cimg/rust:1.75.0
    working_directory: /home/circleci/project
    steps:
      - checkout:
          path: /home/circleci/project
      - setup_remote_docker
      - run:
          name: Make temporary bin
          command: mkdir -p /tmp/bin
      - run:
          name: Install ghr
          command: wget https://github.com/tcnksm/ghr/releases/download/v0.14.0/ghr_v0.14.0_linux_amd64.tar.gz -O - | tar -zxvf - -C /tmp/bin --wildcards --strip-components 1 */ghr
      - run:
          name: Build optimised Wasm binaries
          command: |
            ./scripts/build-optimizer-ci.sh
      - persist_to_workspace:
          root: /home/circleci/project/artifacts
          paths:
            - babylon_contract.wasm
            - btc_staking.wasm
            - checksums.txt
      - run:
          name: Show data
          command: |
            ls -l artifacts
            cat artifacts/checksums.txt
      - run:
          name: Publish artifacts on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            /tmp/bin/ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -replace \
              "$TAG" ./artifacts/

  build_and_upload_schemas:
    docker:
      - image: cimg/rust:1.75.0
    working_directory: /home/circleci/project
    steps:
      - checkout:
          path: /home/circleci/project
      - run:
          name: Make temporary bin
          command: mkdir -p /tmp/bin
      - run:
          name: Install ghr
          command: wget https://github.com/tcnksm/ghr/releases/download/v0.14.0/ghr_v0.14.0_linux_amd64.tar.gz -O - | tar -zxvf - -C /tmp/bin --wildcards --strip-components 1 */ghr
      - run:
          name: Build and run schema generator
          command: |
            (cd ./contracts/babylon && cargo run --bin schema)
      - run:
          name: Show data
          command: ls -l ./contracts/babylon/schema
      - run:
          name: Publish schemas on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some schemas and build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            /tmp/bin/ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -replace \
              "$TAG" ./contracts/babylon/schema/

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  local-tests:
    jobs:
      - local-build-test
  wasm-tests:
    jobs:
      - wasm-build-check-integration
      - benchmarking:
          requires:
            - wasm-build-check-integration
          filters:
            branches:
              only:
                # Long living branches
                - main
                - /^[0-9]+\.[0-9]+$/
                # Add your branch here if benchmarking matters to your work
      - push-to-s3:
          requires:
            - wasm-build-check-integration
  deploy:
    jobs:
      - build_and_upload_contracts:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/
      - build_and_upload_schemas:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/
